/* Mixin para media queries responsivas */
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-xs - 1px}) {
      @content;
    }
  }
  @else if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) {
      @content;
    }
  }
  @else if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) {
      @content;
    }
  }
  @else if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) {
      @content;
    }
  }
  @else if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) {
      @content;
    }
  }
  @else if $breakpoint == xxl {
    @media (min-width: #{$breakpoint-xxl}) {
      @content;
    }
  }
}

/* Mixin para flexbox centrado */
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Mixin para flexbox con dirección y justificación */
@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

/* Mixin para transiciones suaves */
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

/* Mixin para ocultar texto visualmente pero mantenerlo accesible */
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* Mixin para truncar texto con ellipsis */
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Mixin para limitar líneas de texto */
@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Mixin para botones */
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus {
    color: $color;
    background-color: darken($background, 7.5%);
    border-color: darken($border, 10%);
  }

  &:active {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12.5%);
  }

  &:disabled {
    color: $color;
    background-color: $background;
    border-color: $border;
    opacity: 0.65;
    cursor: not-allowed;
  }
}

/* Mixin para cards */
@mixin card {
  background-color: $background-color;
  border: $border-width solid $border-color;
  border-radius: $card-border-radius;
  box-shadow: $card-shadow;
  padding: $card-padding;
}

/* Mixin para inputs */
@mixin form-control {
  display: block;
  width: 100%;
  padding: $form-input-padding-y $form-input-padding-x;
  font-size: $font-size-base;
  line-height: $base-line-height;
  color: $text-color;
  background-color: $background-color;
  border: $border-width solid $border-color;
  border-radius: $form-input-border-radius;
  @include transition(border-color, 0.15s, ease-in-out);

  &:focus {
    color: $text-color;
    background-color: $background-color;
    border-color: lighten($primary-color, 25%);
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba($primary-color, 0.25);
  }

  &:disabled,
  &[readonly] {
    background-color: $background-light;
    opacity: 1;
  }
}

/* Mixin para container responsive */
@mixin container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: $container-padding;
  padding-right: $container-padding;

  @include respond-to(sm) {
    max-width: 540px;
  }

  @include respond-to(md) {
    max-width: 720px;
  }

  @include respond-to(lg) {
    max-width: 960px;
  }

  @include respond-to(xl) {
    max-width: $container-max-width;
  }
}
